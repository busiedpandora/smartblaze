@page "/settings/models"
@using SmartBlaze.Frontend.Components.Layout
@using SmartBlaze.Frontend.Models

@rendermode InteractiveServer

@inject ChatStateService _chatStateService
@inject SettingsService _settingsService
@inject RedirectService _redirectService

<PageTitle>Model settings - SmartBlaze</PageTitle>

<div id="pageRow">
    <img src="icons/gear-fill.svg" width="21" height="21" alt="settings icon" class="me-2"/>
    <span id="pageTitle">
        Settings
    </span>
</div>

<div id="settingsPagesContainer">
    
    <SettingsMenu/>
    
    @if (_settingsService.Chatbots is not null && _settingsService.ChatbotSelected?.Models is not null)
    {
        <EditForm Model="@_modelSettings" OnSubmit="@OnSaveClicked" autocomplete="off">
            <div>
                <label for="chatbot" class="form-label">Chatbot</label>
                <div class="col-2">
                    <InputSelect id="chatbot" class="form-select"
                                 Value="_modelSettings.ChatbotName" ValueExpression="() => _modelSettings.ChatbotName" TValue="string"
                                 ValueChanged="(string chatbotName) => OnChatbotSelected(chatbotName)">
                        @foreach (var chatbot in _settingsService.Chatbots)
                        {
                            <option value="@chatbot.Name">@chatbot.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="border border1 mt-5 mb-4 col-6"></div>

            <div class="mb-3">
                <label for="apiKey" class="form-label">API Key</label>
                <div class="row align-items-center">
                    <div class="col-4">
                        <InputText id="apiKey" type="password" @bind-Value="_modelSettings.ApiKey" class="form-control">

                        </InputText>
                    </div>
                    <div class="col">
                        <img src="icons/eye-fill.svg" width="21" height="21" alt="eye icon" class=""/>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="apiHost" class="form-label">API Host</label>
                <div class="col-4">
                    <InputText id="apiHost" @bind-Value="_modelSettings.ApiHost" class="form-control">

                    </InputText>
                </div>
            </div>

            <div class="mb-3">
                <label for="chatbotModel" class="form-label">Model</label>
                <div class="col-2">
                    <InputSelect id="chatbotModel" @bind-Value="_modelSettings.ChatbotModel" class="form-select">
                        @foreach (var chatbotModel in _modelSettings.ChatbotModels)
                        {
                            <option value="@chatbotModel">@chatbotModel</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="mt-5">
                <button class="btn btn-primary" type="button" @onclick="() => OnCancelClicked()">
                    Cancel
                </button>

                <button class="btn btn-primary ms-2" type="submit" value="Submit">
                    Save
                </button>
            </div>
        </EditForm>
    }
</div>

@code
{
    private bool _applicationStarted = false;

    private ModelSettings _modelSettings = new();
    
    
    protected override Task OnInitializedAsync()
    {
        if (!_applicationStarted)
        {
            _applicationStarted = true;
            
            _settingsService.RefreshView += ReloadComponentState;
            _chatStateService.RefreshView += ReloadComponentState;
        }
        
        _modelSettings.ChatbotName = _settingsService.ChatbotSelected?.Name ?? "";
        _modelSettings.ChatbotModel = _settingsService.ChatbotSelectedModel ?? "";
        _modelSettings.ChatbotModels = _settingsService.ChatbotSelected?.Models ?? [];

        return base.OnInitializedAsync();
    }

    private void OnChatbotSelected(string chatbotName)
    {
        var chatbotSelected = _settingsService.Chatbots?.Find(c => c.Name == chatbotName) ?? new();
        
        _modelSettings.ChatbotName = chatbotSelected.Name ?? "";
        _modelSettings.ChatbotModels = chatbotSelected.Models ?? [];
        _modelSettings.ChatbotModel = chatbotSelected.Models?.ElementAt(0) ?? "";
    }

    private void OnSaveClicked()
    {
        _settingsService.SaveModelSettings(_modelSettings);
    }
    
    private async void OnCancelClicked()
    {
        _settingsService.CloseSettings();
        
        if (_chatStateService.ChatSessions?.Count > 0)
        {
            await _chatStateService.SelectChatSession(_chatStateService.ChatSessions.ElementAt(0));
        }
        else
        {
            _redirectService.Url = "/welcome";
        }
    }
    
    private void ReloadComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
}