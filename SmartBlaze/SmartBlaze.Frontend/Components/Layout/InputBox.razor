@using System.Net.Http.Headers
@using System.Text.RegularExpressions
@using SmartBlaze.Frontend.Dtos
@using SmartBlaze.Frontend.Models
@rendermode InteractiveServer

@inject ChatSessionStateService _chatSessionStateService
@inject SettingsService _settingsService
@inject IJSRuntime _jsRuntime


@if(_chatSessionStateService.CurrentChatSession is not null)
{
    <div class="d-flex justify-content-center">
        <div class="col-8">
            
            @if (!_imageUrlInputActive && !_imageFileInputActive && !_textFileInputActive)
            {
                <div class="row">
                    <div class="col-auto px-1">
                        <button class="btn btn-light" data-bs-toggle="tooltip" data-bs-title="Insert image URL"
                                @onclick="ShowImageUrlInput" style="container: body">
                            <img src="icons/image-fill.svg" alt="image url icon"/>
                        </button>
                    </div>
                    <div class="col-auto px-1">
                        <button class="btn btn-light" data-bs-toggle="tooltip" data-bs-title="Attach image file" style="position: relative"
                                @onclick="ShowImageFileInput">
                            <img src="icons/image.svg" alt="image file icon" style="opacity: 80%"/>
                            <img src="icons/paperclip.svg" alt="image file icon" style="position: absolute;left: -1px;bottom: 9px"/>
                        </button>
                    </div>
                    <div class="col-auto px-1">
                        <button class="btn btn-light" data-bs-toggle="tooltip" data-bs-title="Attach file" style="position: relative"
                                @onclick="ShowNonImageFileInput">
                            <img src="icons/image.svg" alt="image file icon" style="opacity: 80%"/>
                            <img src="icons/paperclip.svg" alt="image file icon" style="position: absolute;left: -1px;bottom: 9px"/>
                        </button>
                    </div>
                </div>
            }
            
            @if (_imageUrlInputActive)
            {
                <div class="row">
                    <div class="col-10 px-1">
                        <InputText @bind-Value="_imageUrl" class="form-control" placeholder="Insert image URL"></InputText>
                    </div>
                    <div class="col-auto ps-0 pe-1">
                        <button class="btn btn-light" @onclick="LoadImageUrl">
                            Add
                        </button>
                    </div>
                    <div class="col-auto px-0">
                        <button class="btn btn-light" @onclick="HideImageUrlInput">
                            Undo
                        </button>
                    </div>
                </div>
            }
            
            @if (_imageFileInputActive)
            {
                <div class="row">
                    <div class="col-10 px-1">
                        <InputFile OnChange="LoadImageFile" multiple class="form-control" 
                                   accept="image/png, image/jpeg, image/webp">
                        </InputFile>
                    </div>
                    <div class="col-auto px-0">
                        <button class="btn btn-light" @onclick="HideImageFileInput">
                            Undo
                        </button>
                    </div>
                </div>
            }

            @if (_textFileInputActive)
            {
            <div class="row">
                <div class="col-10 px-1">
                    <InputFile OnChange="LoadTextFile" multiple class="form-control"
                               accept=".txt, .csv, .json">
                    </InputFile>
                </div>
                <div class="col-auto px-0">
                    <button class="btn btn-light" @onclick="HideNonImageFileInput">
                        Undo
                    </button>
                </div>
            </div>
            }

            <div class="row align-items-center">
                <div class="col px-1">
                    <textarea @ref="_textarea" class="form-control border-3" rows="3" @onkeydown="HandleKeyPressed" 
                        placeholder="Type your text here">
                    </textarea>
                </div>
                <div class="col-1 px-0">
                    @if (_chatSessionStateService.CanUserInteract())
                    {
                        <button id="sendButton" class="btn btn-light d-flex align-items-center justify-content-center"
                                @onclick="OnSendMessageClicked">
                            <img src="icons/send-fill.svg" alt="send icon" height="20">
                        </button>
                    }
                </div>
            </div>
            
            <div>
                <div class="row row-cols-4 align-items-center justify-content-start">
                    @{
                        var index = 0;
                    }
                    
                    @foreach (var imageInput in _fileInputs)
                    {
                        var current = index;
                        <div class="col-auto py-1">
                            @if (imageInput.Data.StartsWith("http"))
                            {
                                <img src="@imageInput.Data" alt="user image" width="100" class="img-thumbnail"/>
                            }
                            else
                            {
                                <img src="data:@imageInput.ContentType;base64, @imageInput.Data" alt="user image" width="100" class="img-thumbnail"/>
                            }
                            <button type="button" class="btn-close" aria-label="Close"
                                    @onclick="() => RemoveInputImage(current)">
                            </button>
                        </div>

                        ++index;
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _applicationStarted = false;
    
    private ElementReference _textarea;

    private bool _imageUrlInputActive = false;
    private bool _imageFileInputActive = false;
    private bool _textFileInputActive = false;
    
    private string _imageUrl = "";

    private List<MediaDto> _fileInputs = new();
    
    
    protected override async Task OnInitializedAsync()
    {
        if (!_applicationStarted)
        {
            _applicationStarted = true;
            
            _chatSessionStateService.RefreshView += ReloadComponentState;
            _settingsService.RefreshView += ReloadComponentState;
        }
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("initializeTooltips");
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void OnSendMessageClicked()
    {
        string text = await _jsRuntime.InvokeAsync<string>("getTextareaValue", _textarea);
        text = text.Trim();

        if (text == string.Empty)
        {
            return;
        }

        var chatSessionConfiguration = _chatSessionStateService.CurrentChatSessionConfiguration;
        
        if (_chatSessionStateService.CanUserInteract() && chatSessionConfiguration is not null)
        {

            var chatbot = _settingsService.GetChatbotByName(chatSessionConfiguration.ChatbotName ?? "");

            if (chatbot is null)
            {
                return;
            }
        
            await _jsRuntime.InvokeVoidAsync("setTextareaValue", _textarea, string.Empty);

            var imageInputs = _fileInputs;
            _fileInputs = new();
            
            await _chatSessionStateService.SendUserMessage(text, imageInputs, chatbot.ApiHost, chatbot.ApiKey, chatbot.TextStreamDelay);
        }
    }

    private void HandleKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSendMessageClicked();
        }
    }
    
    private async void ShowImageUrlInput()
    {
        await _jsRuntime.InvokeVoidAsync("deactivateTooltips");
        _imageUrlInputActive = true;
        ReloadComponentState();
    }
    
    private void HideImageUrlInput()
    {
        _imageUrlInputActive = false;
        ReloadComponentState();
    }

    private void LoadImageUrl()
    {
        _imageUrl = _imageUrl.Trim();
        _imageUrl = Regex.Split(_imageUrl, @"\s+")[0];

        if (_imageUrl != string.Empty)
        {
            _fileInputs.Add(new MediaDto()
            {
                Data = _imageUrl,
                ContentType = "image"
            });

            _imageUrl = "";
            _imageUrlInputActive = false;
        }
    }

    private async void ShowImageFileInput()
    {
        await _jsRuntime.InvokeVoidAsync("deactivateTooltips");
        _imageFileInputActive = true;
        ReloadComponentState();
    }

    private void HideImageFileInput()
    {
        _imageFileInputActive = false;
        ReloadComponentState();
    }

    private async void LoadImageFile(InputFileChangeEventArgs e)
    {
        var memoryStream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(memoryStream);
        var fileBytes = memoryStream.ToArray();
        var base64String = Convert.ToBase64String(fileBytes);
        
        _fileInputs.Add(new MediaDto()
        {
            Name = e.File.Name,
            Data = base64String,
            ContentType = e.File.ContentType
        });
        
        HideImageFileInput();
    }

    private void RemoveInputImage(int index)
    {
        if (index < _fileInputs.Count)
        {
            _fileInputs.RemoveAt(index);
            ReloadComponentState();
        }
    }
    
    private async void ShowNonImageFileInput()
    {
        await _jsRuntime.InvokeVoidAsync("deactivateTooltips");
        _textFileInputActive = true;
        ReloadComponentState();
    }

    private void HideNonImageFileInput()
    {
        _textFileInputActive = false;
        ReloadComponentState();
    }

    private async void LoadTextFile(InputFileChangeEventArgs e)
    {
        var memoryStream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(memoryStream);
        var fileBytes = memoryStream.ToArray();
        
        

        //await UploadFileToOpenAIAsync(fileBytes, e.File.Name, "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");
        await GetFileContentAsync("file-KRffBF5sW3jkKF6rmadLyZIQ", "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");
    }
    
    private void ReloadComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
    
    public async Task UploadFileToOpenAIAsync(byte[] fileBytes, string fileName, string apiKey)
    {
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);

            using (var content = new MultipartFormDataContent())
            {
                // Create a StreamContent to hold the file
                var fileContent = new ByteArrayContent(fileBytes);
                fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

                // Add the file content and other form data
                content.Add(fileContent, "file", fileName);
                content.Add(new StringContent("assistants"), "purpose");

                // Send POST request
                var response = await client.PostAsync("https://api.openai.com/v1/files", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("File uploaded successfully.");
                    var result = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(result);
                }
                else
                {
                    Console.WriteLine($"Failed to upload file. Status code: {response.StatusCode}");
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(error);
                }
            }
        }
    }
    
    public async Task<string> GetFileContentAsync(string fileId, string apiKey)
    {
        using (var client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);
        
            var response = await client.GetAsync($"https://api.openai.com/v1/files/{fileId}/content");

            if (response.IsSuccessStatusCode)
            {
                var c = await response.Content.ReadAsStringAsync();
                return await response.Content.ReadAsStringAsync();
            }
            else
            {
                Console.WriteLine($"Failed to retrieve file content. Status code: {response.StatusCode}");
                return null;
            }
        }
    }
}