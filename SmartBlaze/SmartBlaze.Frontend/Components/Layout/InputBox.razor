@using System.Text.RegularExpressions
@using SmartBlaze.Frontend.Models
@rendermode InteractiveServer

@inject ChatStateService _chatStateService
@inject SettingsService _settingsService
@inject IJSRuntime _jsRuntime


@if(_chatStateService.CurrentChatSession is not null)
{
    <div class="d-flex justify-content-center align-items-center">
        <div class="col-8">
            <textarea @ref="_textarea" class="form-control border-3" rows="3" @onkeydown="HandleKeyPressed"
                placeholder="Type your text here">
            </textarea>
        </div>
        <div class="col-1 ms-1">
            @if (_chatStateService.CanUserInteract())
            {
                <button id="sendButton" class="btn btn-light d-flex align-items-center justify-content-center"
                        @onclick="OnSendMessageClicked">
                    <img src="icons/send-fill.svg" alt="send icon" width="20" height="20">
                </button> 
            }
        </div>
    </div>
    
    <div class="d-flex justify-content-center align-items-center">
        <div class="col-8">
            <InputText @bind-Value="_imageUrls" class="form-control" placeholder="Insert image urls"></InputText>
        </div>
        <div>
            <button @onclick="LoadImageUrl" class="btn btn-primary">Load image url</button>
        </div>
    </div>
    
    <div>
        <div class="col-8">
            <InputFile OnChange="LoadImageFile" multiple class="form-control" accept="image/*"></InputFile>
        </div>
    </div>
}

@code {
    private bool _applicationStarted = false;
    private ElementReference _textarea;

    private List<ImageInput> _imageInputs = new();
    private string _imageUrls = "";
    
    protected override async Task OnInitializedAsync()
    {
        if (!_applicationStarted)
        {
            _applicationStarted = true;
            
            _chatStateService.RefreshView += ReloadComponentState;
            _settingsService.RefreshView += ReloadComponentState;
        }

        await base.OnInitializedAsync();
    }
    
    private async void OnSendMessageClicked()
    {
        string text = await _jsRuntime.InvokeAsync<string>("getTextareaValue", _textarea);
        text = text.Trim();

        if (text == string.Empty)
        {
            return;
        }
        
        if (_chatStateService.CanUserInteract())
        {
            var chatbotName = _chatStateService.CurrentChatSession?.ChatbotName;

            if (chatbotName is null)
            {
                return;
            }

            var chatbot = _settingsService.GetChatbotByName(chatbotName);

            if (chatbot is null)
            {
                return;
            }
        
            await _jsRuntime.InvokeVoidAsync("setTextareaValue", _textarea, string.Empty);
            
            await _chatStateService.SendUserMessage(text, _imageInputs, chatbot.Apihost, 
                chatbot.ApiKey, _settingsService.TextStream);

            _imageInputs = new();
            _imageUrls = "";
        }
    }

    private void HandleKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSendMessageClicked();
        }
    }
    
    private void ReloadComponentState()
    {
        InvokeAsync(StateHasChanged);
    }

    private void LoadImageFile(InputFileChangeEventArgs e)
    {
        _imageInputs.Add(new ImageInput()
        {
            Name = e.File.Name,
            Data = e.File,
            Type = "image-file"
        });
    }

    private void LoadImageUrl()
    {
        string[]? imageUrls = _imageUrls == string.Empty ? null : Regex.Split(_imageUrls, @"\s+");
        if (imageUrls is not null)
        {
            foreach (var imageUrl in imageUrls)
            {
                _imageInputs.Add(new ImageInput()
                {
                    Data = imageUrl,
                    Type = "image-url"
                });
            }
        }
    }
}