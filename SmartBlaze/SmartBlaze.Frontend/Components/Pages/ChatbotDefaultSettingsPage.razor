@page "/settings/chatbot"
@using SmartBlaze.Frontend.Components.Layout
@using SmartBlaze.Frontend.Models

@rendermode InteractiveServer

@inject ChatSessionStateService _chatSessionStateService
@inject SettingsService _settingsService
@inject RedirectionService _redirectionService

<PageTitle>Chatbot settings - SmartBlaze</PageTitle>

<div id="pageRow">
    <div class="row justify-content-center align-items-center h-100">
        <div class="col-auto pe-0">
            <img src="icons/gear-fill.svg" width="21" height="21" alt="settings icon"/>
        </div>
        <div class="col-auto">
            <span id="pageTitle">
                Settings
            </span>
        </div>
    </div>
</div>

<div id="settingsPagesContainer">
    
    <SettingsMenu/>
    
    @if (_settingsService.Chatbots is not null && _settingsService.ChatbotSelected?.TextGenerationModels is not null)
    {
        <EditForm Model="@_chatbotSettings" OnSubmit="@OnSaveClicked" autocomplete="off">
            <div>
                <label for="chatbot" class="form-label">Chatbot</label>
                <div class="col-2">
                    <InputSelect id="chatbot" class="form-select"
                                 Value="_chatbotSettings.ChatbotName" ValueExpression="() => _chatbotSettings.ChatbotName" TValue="string"
                                 ValueChanged="(string chatbotName) => OnChatbotSelected(chatbotName)">
                        @foreach (var chatbot in _settingsService.Chatbots)
                        {
                            <option value="@chatbot.Name">@chatbot.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="border border1 mt-5 mb-4 col-6"></div>

            <div class="mb-4">
                <label for="apiHost" class="form-label">API Host</label>
                <div class="col-4">
                    <InputText id="apiHost" @bind-Value="_chatbotSettings.ApiHost" class="form-control">

                    </InputText>
                </div>
            </div>
            
            <div class="mb-4">
                <label for="apiKey" class="form-label">API Key</label>
                <div class="row align-items-center">
                    <div class="col-4">
                        <InputText id="apiKey" type="password" @bind-Value="_chatbotSettings.ApiKey" class="form-control">

                        </InputText>
                    </div>
                    <div class="col">
                        <!--<img src="icons/eye-fill.svg" width="21" height="21" alt="eye icon" class=""/>-->
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <label for="textGenerationChatbotModel" class="form-label">Text Generation Model</label>
                <div class="col-2">
                    <InputSelect id="textGenerationChatbotModel" @bind-Value="_chatbotSettings.TextGenerationChatbotModel" 
                                 class="form-select">
                        @foreach (var chatbotModel in _chatbotSettings.TextGenerationChatbotModels)
                        {
                            <option value="@chatbotModel">@chatbotModel</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="mb-4">
                <label for="imageGenerationChatbotModel" class="form-label">Image Generation Model</label>
                <div class="col-2">
                    <InputSelect id="imageGenerationChatbotModel" @bind-Value="_chatbotSettings.ImageGenerationChatbotModel" 
                                 class="form-select">
                        @foreach (var chatbotModel in _chatbotSettings.ImageGenerationChatbotModels)
                        {
                        <option value="@chatbotModel">@chatbotModel</option>
                        }
                    </InputSelect>
                </div>
            </div>
            
            <div class="mb-4">
                <label for="temperature" class="form-label">Temperature (For Text Generation)</label>
                <div class="d-flex">
                    <div class="col-4">
                        <input id="temperature" type="range" class="form-range" step="0.1" @bind-value="_chatbotSettings.Temperature"
                               @oninput="OnTemperatureChanged"
                               min="@_chatbotSettings.MinTemperature" max="@_chatbotSettings.MaxTemperature"/>
                    </div>
                    <div class="ms-4">
                        <span class="badge bg-primary">@_badgeTemperature</span>
                    </div>
                </div>
            </div>

            <div class="mt-5">
                <button class="btn btn-primary" type="button" @onclick="() => OnCancelClicked()">
                    Cancel
                </button>

                <button class="btn btn-primary ms-2" type="submit" value="Submit">
                    Save
                </button>
            </div>
        </EditForm>
    }
</div>

@code
{
    private bool _applicationStarted = false;

    private ChatbotSettings _chatbotSettings = new();

    private float _badgeTemperature;
    
    
    protected override Task OnInitializedAsync()
    {
        if (!_applicationStarted)
        {
            _applicationStarted = true;
            
            _settingsService.RefreshView += ReloadComponentState;
            _chatSessionStateService.RefreshView += ReloadComponentState;
        }
        
        _chatbotSettings.ChatbotName = _settingsService.ChatbotSelected?.Name ?? "";
        _chatbotSettings.TextGenerationChatbotModel = _settingsService.ChatbotSelected?.TextGenerationModel ?? "";
        _chatbotSettings.ImageGenerationChatbotModel = _settingsService.ChatbotSelected?.ImageGenerationModel ?? "";
        _chatbotSettings.TextGenerationChatbotModels = _settingsService.ChatbotSelected?.TextGenerationModels ?? [];
        _chatbotSettings.ImageGenerationChatbotModels = _settingsService.ChatbotSelected?.ImageGenerationModels ?? [];
        _chatbotSettings.ApiHost = _settingsService.ChatbotSelected?.ApiHost ?? "";
        _chatbotSettings.ApiKey = _settingsService.ChatbotSelected?.ApiKey ?? "";
        _chatbotSettings.Temperature = _settingsService.ChatbotSelected?.Temperature ?? 0.0f;
        _chatbotSettings.MinTemperature = _settingsService.ChatbotSelected?.MinTemperature ?? 0.0f;
        _chatbotSettings.MaxTemperature = _settingsService.ChatbotSelected?.Maxtemperature ?? 1.0f;
        
        _badgeTemperature = _settingsService.ChatbotSelected?.Temperature ?? 0.0f;
        
        return base.OnInitializedAsync();
    }

    private void OnChatbotSelected(string chatbotName)
    {
        var chatbotSelected = _settingsService.Chatbots?.Find(c => c.Name == chatbotName);

        if (chatbotSelected is not null)
        {
            _chatbotSettings.ChatbotName = chatbotSelected.Name;
            _chatbotSettings.TextGenerationChatbotModels = chatbotSelected.TextGenerationModels;
            _chatbotSettings.ImageGenerationChatbotModels = chatbotSelected.ImageGenerationModels;
            _chatbotSettings.TextGenerationChatbotModel = chatbotSelected.TextGenerationModel;
            _chatbotSettings.ImageGenerationChatbotModel = chatbotSelected.ImageGenerationModel;
            _chatbotSettings.ApiHost = chatbotSelected.ApiHost;
            _chatbotSettings.ApiKey = chatbotSelected.ApiKey;
            _chatbotSettings.Temperature = chatbotSelected.Temperature;

            _badgeTemperature = chatbotSelected.Temperature;
        }
    }

    private async void OnSaveClicked()
    {
        await _settingsService.SaveChatbotDefaultSettings(_chatbotSettings);
    }
    
    private async void OnCancelClicked()
    {
        _settingsService.CloseSettings();
        
        if (_chatSessionStateService.ChatSessions?.Count > 0)
        {
            await _chatSessionStateService.SelectChatSession(_chatSessionStateService.ChatSessions.ElementAt(0));
        }
        else
        {
            _redirectionService.Url = "/welcome";
        }
    }

    private void OnTemperatureChanged(ChangeEventArgs e)
    {
        _badgeTemperature = Convert.ToSingle(e.Value);
    }

    private void ReloadComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
}