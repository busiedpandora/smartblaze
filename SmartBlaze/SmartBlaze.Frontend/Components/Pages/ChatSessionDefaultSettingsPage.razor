@page "/settings/chat"
@using SmartBlaze.Frontend.Models
@using SmartBlaze.Frontend.Components.Layout

@rendermode InteractiveServer

@inject SettingsService _settingsService
@inject ChatSessionStateService _chatSessionStateService
@inject RedirectionService _redirectionService

<PageTitle>Chat default settings - SmartBlaze</PageTitle>

<div id="pageRow">
    <div class="row justify-content-center align-items-center h-100">
        <div class="col-auto pe-0">
            <img src="icons/gear-fill.svg" width="21" height="21" alt="settings icon"/>
        </div>
        <div class="col-auto">
            <span id="pageTitle">
                Settings
            </span>
        </div>
    </div>
</div>

<div id="settingsPagesContainer">
    
    <SettingsMenu/>

    <EditForm Model="_chatSessionDefaultSettings" OnSubmit="@OnSaveClicked" autocomplete="off">
        <div class="mb-3">
            <label for="systemInstruction" class="form-label">System instruction (For Text Generation)</label>
            <div class="col-6">
                <InputTextArea id="systemInstruction" class="form-control" @bind-Value="_chatSessionDefaultSettings.SystemInstruction"></InputTextArea>
            </div>
        </div>

        <div class="mb-3">
            <label for="textStream" class="form-label">Text stream (For Text Generation)</label>
            <InputCheckbox id="textStream" class="form-check" @bind-Value="_chatSessionDefaultSettings.TextStream"></InputCheckbox>
        </div>

        <div class="mt-5">
            <button class="btn btn-primary" type="button" @onclick="() => OnCancelClicked()">
                Cancel
            </button>

            <button class="btn btn-primary ms-2" type="submit" value="Submit">
                Save
            </button>
        </div>
    </EditForm>
</div>

@code {
    private bool _applicationStarted = false;
    
    private ChatSessionDefaultSettings _chatSessionDefaultSettings = new();

    
    protected override Task OnInitializedAsync()
    {
        if (!_applicationStarted)
        {
            _applicationStarted = true;
            
            _settingsService.RefreshView += ReloadComponentState;
            _chatSessionStateService.RefreshView += ReloadComponentState;
        }
        
        _chatSessionDefaultSettings.SystemInstruction = _settingsService.SystemInstruction ?? "";
        _chatSessionDefaultSettings.TextStream = _settingsService.TextStream;
        
        return base.OnInitializedAsync();
    }
    
    private async void OnSaveClicked()
    {
        await _settingsService.SaveChatSessionDefaultSettings(_chatSessionDefaultSettings);
    }
    
    private async void OnCancelClicked()
    {
        _settingsService.CloseSettings();
        
        if (_chatSessionStateService.ChatSessions?.Count > 0)
        {
            await _chatSessionStateService.SelectChatSession(_chatSessionStateService.ChatSessions.ElementAt(0));
        }
        else
        {
            _redirectionService.Url = "/welcome";
        }
    }
    
    private void ReloadComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
}