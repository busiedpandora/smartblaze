@using System.Text.RegularExpressions
@using SmartBlaze.Frontend.Models
@rendermode InteractiveServer

@inject ChatSessionStateService _chatSessionStateService
@inject SettingsService _settingsService
@inject IJSRuntime _jsRuntime


@if(_chatSessionStateService.CurrentChatSession is not null)
{
    <div class="d-flex justify-content-center">
        <div class="col-8">
            
            @if (!_imageUrlInputActive && !_imageFileInputActive)
            {
                <div class="row">
                    <div class="col-auto px-1">
                        <button class="btn btn-light" data-bs-toggle="tooltip" data-bs-title="Insert image URL"
                                @onclick="ShowImageUrlInput" style="container: body">
                            <img src="icons/image-fill.svg" alt="image url icon"/>
                        </button>
                    </div>
                    <div class="col-auto px-1">
                        <button class="btn btn-light" data-bs-toggle="tooltip" data-bs-title="Attach image file" style="position: relative"
                                @onclick="ShowImageFileInput">
                            <img src="icons/image.svg" alt="image file icon" style="opacity: 80%"/>
                            <img src="icons/paperclip.svg" alt="image file icon" style="position: absolute;left: -1px;bottom: 9px"/>
                        </button>
                    </div>
                </div>
            }
            
            @if (_imageUrlInputActive)
            {
                <div class="row">
                    <div class="col-10 px-1">
                        <InputText @bind-Value="_imageUrl" class="form-control" placeholder="Insert image URL"></InputText>
                    </div>
                    <div class="col-auto ps-0 pe-1">
                        <button class="btn btn-light" @onclick="LoadImageUrl">
                            Add
                        </button>
                    </div>
                    <div class="col-auto px-0">
                        <button class="btn btn-light" @onclick="HideImageUrlInput">
                            Undo
                        </button>
                    </div>
                </div>
            }
            
            @if (_imageFileInputActive)
            {
                <div class="row">
                    <div class="col-10 px-1">
                        <InputFile OnChange="LoadImageFile" multiple class="form-control" 
                                   accept="image/png, image/jpeg, image/webp">
                        </InputFile>
                    </div>
                    <div class="col-auto px-0">
                        <button class="btn btn-light" @onclick="HideImageFileInput">
                            Undo
                        </button>
                    </div>
                </div>
            }

            <div class="row align-items-center">
                <div class="col px-1">
                    <textarea @ref="_textarea" class="form-control border-3" rows="3" @onkeydown="HandleKeyPressed" 
                        placeholder="Type your text here">
                    </textarea>
                </div>
                <div class="col-1 px-0">
                    @if (_chatSessionStateService.CanUserInteract())
                    {
                        <button id="sendButton" class="btn btn-light d-flex align-items-center justify-content-center"
                                @onclick="OnSendMessageClicked">
                            <img src="icons/send-fill.svg" alt="send icon" height="20">
                        </button>
                    }
                </div>
            </div>
            
            <div>
                <div class="row row-cols-4 align-items-center justify-content-start">
                    @{
                        var index = 0;
                    }
                    
                    @foreach (var imageInput in _imageInputs)
                    {
                        var current = index;
                        <div class="col-auto py-1">
                            @if (imageInput.Data.StartsWith("http"))
                            {
                                <img src="@imageInput.Data" alt="user image" width="100" class="img-thumbnail"/>
                            }
                            else
                            {
                                <img src="data:@imageInput.ContentType;base64, @imageInput.Data" alt="user image" width="100" class="img-thumbnail"/>
                            }
                            <button type="button" class="btn-close" aria-label="Close"
                                    @onclick="() => RemoveInputImage(current)">
                            </button>
                        </div>

                        ++index;
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _applicationStarted = false;
    
    private ElementReference _textarea;

    private bool _imageUrlInputActive = false;
    private bool _imageFileInputActive = false;
    
    private string _imageUrl = "";

    private List<ImageInput> _imageInputs = new();
    
    
    protected override async Task OnInitializedAsync()
    {
        if (!_applicationStarted)
        {
            _applicationStarted = true;
            
            _chatSessionStateService.RefreshView += ReloadComponentState;
            _settingsService.RefreshView += ReloadComponentState;
        }
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("initializeTooltips");
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void OnSendMessageClicked()
    {
        string text = await _jsRuntime.InvokeAsync<string>("getTextareaValue", _textarea);
        text = text.Trim();

        if (text == string.Empty)
        {
            return;
        }
        
        if (_chatSessionStateService.CanUserInteract())
        {

            var chatbot = _settingsService.ChatbotSelected;

            if (chatbot is null)
            {
                return;
            }
        
            await _jsRuntime.InvokeVoidAsync("setTextareaValue", _textarea, string.Empty);

            var imageInputs = _imageInputs;
            _imageInputs = new();
            
            await _chatSessionStateService.SendUserMessage(text, imageInputs, chatbot, 
                _settingsService.SystemInstruction, _settingsService.TextStream);
        }
    }

    private void HandleKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSendMessageClicked();
        }
    }
    
    private async void ShowImageUrlInput()
    {
        await _jsRuntime.InvokeVoidAsync("deactivateTooltips");
        _imageUrlInputActive = true;
        ReloadComponentState();
    }
    
    private void HideImageUrlInput()
    {
        _imageUrlInputActive = false;
        ReloadComponentState();
    }

    private void LoadImageUrl()
    {
        _imageUrl = _imageUrl.Trim();
        _imageUrl = Regex.Split(_imageUrl, @"\s+")[0];

        if (_imageUrl != string.Empty)
        {
            _imageInputs.Add(new ImageInput()
            {
                Data = _imageUrl
            });

            _imageUrl = "";
            _imageUrlInputActive = false;
        }
    }

    private async void ShowImageFileInput()
    {
        await _jsRuntime.InvokeVoidAsync("deactivateTooltips");
        _imageFileInputActive = true;
        ReloadComponentState();
    }

    private void HideImageFileInput()
    {
        _imageFileInputActive = false;
        ReloadComponentState();
    }

    private async void LoadImageFile(InputFileChangeEventArgs e)
    {
        var memoryStream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(memoryStream);
        var fileBytes = memoryStream.ToArray();
        var base64String = Convert.ToBase64String(fileBytes);
        
        _imageInputs.Add(new ImageInput()
        {
            Data = base64String,
            ContentType = e.File.ContentType
        });
        
        HideImageFileInput();
    }

    private void RemoveInputImage(int index)
    {
        if (index < _imageInputs.Count)
        {
            _imageInputs.RemoveAt(index);
            ReloadComponentState();
        }
    }
    
    private void ReloadComponentState()
    {
        InvokeAsync(StateHasChanged);
    }
}