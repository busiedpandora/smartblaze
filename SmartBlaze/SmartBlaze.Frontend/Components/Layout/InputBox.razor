@rendermode InteractiveServer

@inject ChatStateService chatStateService
@inject IJSRuntime jsRuntime


@if(chatStateService.CurrentChatSession is not null)
{
    <div class="d-flex justify-content-center align-items-center">
        <div class="col-8">
            <textarea @ref="_textarea" class="form-control border-3" rows="3" @onkeydown="HandleKeyPressed"
                placeholder="Type your text here">
            </textarea>
        </div>
        <div class="col-1 ms-1">
            @if (!chatStateService.IsGeneratingResponse)
            {
                <button id="sendButton" class="btn btn-light d-flex align-items-center justify-content-center"
                        @onclick="OnSendMessageClicked">
                    <img src="icons/send-fill.svg" alt="send icon" width="20" height="20">
                </button> 
            }
        </div>
    </div>
}

@code {
    private ElementReference _textarea;
    
    protected override async Task OnInitializedAsync()
    {
        chatStateService.OnChange += RefreshView;

        await base.OnInitializedAsync();
    }
    
    private async void OnSendMessageClicked()
    {
        string text = await jsRuntime.InvokeAsync<string>("getTextareaValue", _textarea);
        
        await jsRuntime.InvokeVoidAsync("setTextareaValue", _textarea, string.Empty);
        
        await chatStateService.SendUserMessage(text);
    }

    private void HandleKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnSendMessageClicked();
        }
    }
    
    private void RefreshView()
    {
        InvokeAsync(StateHasChanged);
    }
}