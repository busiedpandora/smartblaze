@page "/settings/models"
@using SmartBlaze.Frontend.Dtos

@rendermode InteractiveServer

@inject ChatbotStateService _chatbotStateService

<PageTitle>Model settings - SmartBlaze</PageTitle>

<div id="pageRow">
    <img src="icons/gear-fill.svg" width="21" height="21" alt="settings icon" class="me-2"/>
    <span id="pageTitle">
        Settings
    </span>
</div>

<div id="settingsPagesContainer">
    @if (_chatbotStateService.Chatbots is not null && _chatbotStateService.ChatbotSelected?.Models is not null)
    {
        <EditForm Model="@_chatbotInputSelect" OnSubmit="@OnSaveClicked" autocomplete="off">
            <div>
                <label for="chatbot" class="form-label">Chatbot</label>
                <div class="col-2">
                    <InputSelect id="chatbot" class="form-select" 
                                 Value="_chatbotInputSelect.Name" ValueExpression="() => _chatbotInputSelect.Name" TValue="string"
                                 ValueChanged="(string chatbotName) => OnChatbotSelected(chatbotName)">
                        @foreach (var chatbot in _chatbotStateService.Chatbots)
                        { 
                            <option value="@chatbot.Name">@chatbot.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            
            <div class="border border1 mt-5 mb-4 col-6"></div>
            
            <div class="mb-3">
                <label for="apiKey" class="form-label">API Key</label>
                    <div class="row align-items-center">
                        <div class="col-4">
                            <InputText id="apiKey" type="password" @bind-Value="_apiKey" class="form-control">
                                
                            </InputText>
                        </div>
                        <div class="col">
                            <img src="icons/eye-fill.svg" width="21" height="21" alt="eye icon" class=""/>
                        </div>
                    </div>
            </div>
            
            <div class="mb-3">
                <label for="apiHost" class="form-label">API Host</label>
                <div class="col-4">
                    <InputText id="apiHost" @bind-Value="_apiHost" class="form-control">
                        
                    </InputText>
                </div>
            </div>
            
            <div class="mb-3">
                <label for="chatbotModel" class="form-label">Model</label>
                <div class="col-2">
                    <InputSelect id="chatbotModel" @bind-Value="_chatbotModelInputSelect" class="form-select">
                        @foreach (var chatbotModel in _chatbotModelsInputSelect)
                        {
                            <option value="@chatbotModel">@chatbotModel</option>
                        }
                    </InputSelect>
                </div>
            </div>
            
            <div class="mt-5">
                <button class="btn btn-primary">
                    Cancel
                </button>

                <button class="btn btn-primary ms-2" type="submit" value="Submit">
                    Save
                </button>
            </div>
        </EditForm>
    }
</div>

@code
{
    private ChatbotDto _chatbotInputSelect = new();
    private string _apiKey = "";
    private string _apiHost = "";
    private string _chatbotModelInputSelect = "";
    private List<string> _chatbotModelsInputSelect = new();


    protected override Task OnInitializedAsync()
    {
        _chatbotInputSelect = _chatbotStateService.ChatbotSelected ?? new ChatbotDto();
        _chatbotModelInputSelect = _chatbotStateService.ChatbotSelectedModel ?? "";
        _chatbotModelsInputSelect = _chatbotInputSelect.Models ?? new();

        return base.OnInitializedAsync();
    }

    private void OnChatbotSelected(string chatbotName)
    {
        _chatbotInputSelect = _chatbotStateService.Chatbots?.Find(c => c.Name == chatbotName) ?? new();
        _chatbotModelsInputSelect = _chatbotInputSelect.Models ?? new();
        _chatbotModelInputSelect = _chatbotInputSelect.Models?.ElementAt(0) ?? "";
    }

    private void OnSaveClicked()
    {
        _chatbotStateService.SelectChatbot(_chatbotInputSelect, _chatbotModelInputSelect);
    }
}